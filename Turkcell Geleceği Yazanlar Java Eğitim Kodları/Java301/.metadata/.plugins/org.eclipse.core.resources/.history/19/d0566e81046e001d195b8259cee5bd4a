import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class Driver {

	public static void main(String[] args) {
		/*Stream.of(1,2,3,4,5,7)
			.filter(new Predicate<Integer>() {

				@Override
				public boolean test(Integer t) {
					System.out.println("Test Filter");
					return t > 2;
				}
			})
			.forEach(new Consumer<Integer>() {

				@Override
				public void accept(Integer t) {
					System.out.println("Accept");
					System.out.println(t);
				}
			});
			.anyMatch(new Predicate<Integer>() {

				@Override
				public boolean test(Integer t) {
					System.out.println("Test AnyMatch");
					return t==5;
				}
				
			});*/
		
		/*Stream.of("b1","a2","d3","e1")
			.map(new Function<String, String>(){

				@Override
				public String apply(String t) {
					System.out.println("Map");
					return t.toUpperCase();
				}
			})
			.filter(new Predicate<String>() {

				@Override
				public boolean test(String t) {
					System.out.println("Filter");
					return t.startsWith("A");
				}
			})
			.forEach(System.out::println);*/
		
		System.out.println("---------------------------------");
		
		Stream.of("b1","a2","d3","e1")
		.filter(new Predicate<String>() {

			@Override
			public boolean test(String t) {
				System.out.println("Filter");
				return t.startsWith("a");
			}
		})
		.map(new Function<String, String>(){

			@Override
			public String apply(String t) {
				System.out.println("Map");
				return t.toUpperCase();
			}
		})
		.forEach(System.out::println);
			
	}
}
